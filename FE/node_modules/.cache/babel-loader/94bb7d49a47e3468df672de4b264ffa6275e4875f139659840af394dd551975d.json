{"ast":null,"code":"import { io } from 'socket.io-client';\nclass SocketService {\n  constructor() {\n    this.socket = null;\n    this.isConnected = false;\n    this.listeners = new Map();\n  }\n  connect() {\n    if (this.socket && this.isConnected) {\n      return this.socket;\n    }\n    const serverUrl = process.env.REACT_APP_SOCKET_URL || 'http://localhost:5000';\n    this.socket = io(serverUrl, {\n      transports: ['websocket', 'polling'],\n      timeout: 20000,\n      forceNew: true\n    });\n    this.socket.on('connect', () => {\n      console.log('ðŸ”Œ Connected to server');\n      this.isConnected = true;\n    });\n    this.socket.on('disconnect', () => {\n      console.log('ðŸ”Œ Disconnected from server');\n      this.isConnected = false;\n    });\n    this.socket.on('connect_error', error => {\n      console.error('ðŸ”Œ Connection error:', error);\n      this.isConnected = false;\n    });\n    return this.socket;\n  }\n  disconnect() {\n    if (this.socket) {\n      this.socket.disconnect();\n      this.socket = null;\n      this.isConnected = false;\n    }\n  }\n\n  // Join user-specific room\n  joinUserRoom(userId) {\n    if (this.socket && this.isConnected) {\n      this.socket.emit('join-user-room', userId);\n    }\n  }\n\n  // Join leaderboard room\n  joinLeaderboard() {\n    if (this.socket && this.isConnected) {\n      this.socket.emit('join-leaderboard');\n    }\n  }\n\n  // Listen for quiz completion notifications\n  onQuizCompleted(callback) {\n    this.addEventListener('quiz-completed', callback);\n  }\n\n  // Listen for achievement unlocks\n  onAchievementUnlocked(callback) {\n    this.addEventListener('achievement-unlocked', callback);\n  }\n\n  // Listen for level up notifications\n  onLevelUp(callback) {\n    this.addEventListener('level-up', callback);\n  }\n\n  // Listen for leaderboard updates\n  onLeaderboardUpdate(callback) {\n    this.addEventListener('leaderboard-updated', callback);\n  }\n\n  // Listen for rare achievements\n  onRareAchievement(callback) {\n    this.addEventListener('rare-achievement', callback);\n  }\n\n  // Listen for streak milestones\n  onStreakMilestone(callback) {\n    this.addEventListener('streak-milestone', callback);\n  }\n\n  // Listen for rank improvements\n  onRankImproved(callback) {\n    this.addEventListener('rank-improved', callback);\n  }\n\n  // Listen for daily challenges\n  onDailyChallenge(callback) {\n    this.addEventListener('daily-challenge', callback);\n  }\n\n  // Listen for study reminders\n  onStudyReminder(callback) {\n    this.addEventListener('study-reminder', callback);\n  }\n\n  // Generic event listener\n  addEventListener(event, callback) {\n    if (this.socket) {\n      this.socket.on(event, callback);\n\n      // Store listener for cleanup\n      if (!this.listeners.has(event)) {\n        this.listeners.set(event, []);\n      }\n      this.listeners.get(event).push(callback);\n    }\n  }\n\n  // Remove event listener\n  removeEventListener(event, callback) {\n    if (this.socket && this.listeners.has(event)) {\n      const eventListeners = this.listeners.get(event);\n      const index = eventListeners.indexOf(callback);\n      if (index > -1) {\n        eventListeners.splice(index, 1);\n        this.socket.off(event, callback);\n      }\n    }\n  }\n\n  // Remove all listeners for an event\n  removeAllListeners(event) {\n    if (this.socket) {\n      this.socket.removeAllListeners(event);\n      if (this.listeners.has(event)) {\n        this.listeners.delete(event);\n      }\n    }\n  }\n\n  // Clean up all listeners\n  cleanup() {\n    if (this.socket) {\n      this.listeners.forEach((callbacks, event) => {\n        callbacks.forEach(callback => {\n          this.socket.off(event, callback);\n        });\n      });\n      this.listeners.clear();\n    }\n  }\n\n  // Emit events\n  emit(event, data) {\n    if (this.socket && this.isConnected) {\n      this.socket.emit(event, data);\n    }\n  }\n\n  // Get connection status\n  getConnectionStatus() {\n    var _this$socket;\n    return {\n      isConnected: this.isConnected,\n      socketId: ((_this$socket = this.socket) === null || _this$socket === void 0 ? void 0 : _this$socket.id) || null\n    };\n  }\n}\nexport default new SocketService();","map":{"version":3,"names":["io","SocketService","constructor","socket","isConnected","listeners","Map","connect","serverUrl","process","env","REACT_APP_SOCKET_URL","transports","timeout","forceNew","on","console","log","error","disconnect","joinUserRoom","userId","emit","joinLeaderboard","onQuizCompleted","callback","addEventListener","onAchievementUnlocked","onLevelUp","onLeaderboardUpdate","onRareAchievement","onStreakMilestone","onRankImproved","onDailyChallenge","onStudyReminder","event","has","set","get","push","removeEventListener","eventListeners","index","indexOf","splice","off","removeAllListeners","delete","cleanup","forEach","callbacks","clear","data","getConnectionStatus","_this$socket","socketId","id"],"sources":["C:/Users/RamRaghu/OneDrive/Desktop/build-week projects/project/gamification/FE/src/services/socketService.js"],"sourcesContent":["import { io } from 'socket.io-client';\r\n\r\nclass SocketService {\r\n  constructor() {\r\n    this.socket = null;\r\n    this.isConnected = false;\r\n    this.listeners = new Map();\r\n  }\r\n\r\n  connect() {\r\n    if (this.socket && this.isConnected) {\r\n      return this.socket;\r\n    }\r\n\r\n    const serverUrl = process.env.REACT_APP_SOCKET_URL || 'http://localhost:5000';\r\n    \r\n    this.socket = io(serverUrl, {\r\n      transports: ['websocket', 'polling'],\r\n      timeout: 20000,\r\n      forceNew: true\r\n    });\r\n\r\n    this.socket.on('connect', () => {\r\n      console.log('ðŸ”Œ Connected to server');\r\n      this.isConnected = true;\r\n    });\r\n\r\n    this.socket.on('disconnect', () => {\r\n      console.log('ðŸ”Œ Disconnected from server');\r\n      this.isConnected = false;\r\n    });\r\n\r\n    this.socket.on('connect_error', (error) => {\r\n      console.error('ðŸ”Œ Connection error:', error);\r\n      this.isConnected = false;\r\n    });\r\n\r\n    return this.socket;\r\n  }\r\n\r\n  disconnect() {\r\n    if (this.socket) {\r\n      this.socket.disconnect();\r\n      this.socket = null;\r\n      this.isConnected = false;\r\n    }\r\n  }\r\n\r\n  // Join user-specific room\r\n  joinUserRoom(userId) {\r\n    if (this.socket && this.isConnected) {\r\n      this.socket.emit('join-user-room', userId);\r\n    }\r\n  }\r\n\r\n  // Join leaderboard room\r\n  joinLeaderboard() {\r\n    if (this.socket && this.isConnected) {\r\n      this.socket.emit('join-leaderboard');\r\n    }\r\n  }\r\n\r\n  // Listen for quiz completion notifications\r\n  onQuizCompleted(callback) {\r\n    this.addEventListener('quiz-completed', callback);\r\n  }\r\n\r\n  // Listen for achievement unlocks\r\n  onAchievementUnlocked(callback) {\r\n    this.addEventListener('achievement-unlocked', callback);\r\n  }\r\n\r\n  // Listen for level up notifications\r\n  onLevelUp(callback) {\r\n    this.addEventListener('level-up', callback);\r\n  }\r\n\r\n  // Listen for leaderboard updates\r\n  onLeaderboardUpdate(callback) {\r\n    this.addEventListener('leaderboard-updated', callback);\r\n  }\r\n\r\n  // Listen for rare achievements\r\n  onRareAchievement(callback) {\r\n    this.addEventListener('rare-achievement', callback);\r\n  }\r\n\r\n  // Listen for streak milestones\r\n  onStreakMilestone(callback) {\r\n    this.addEventListener('streak-milestone', callback);\r\n  }\r\n\r\n  // Listen for rank improvements\r\n  onRankImproved(callback) {\r\n    this.addEventListener('rank-improved', callback);\r\n  }\r\n\r\n  // Listen for daily challenges\r\n  onDailyChallenge(callback) {\r\n    this.addEventListener('daily-challenge', callback);\r\n  }\r\n\r\n  // Listen for study reminders\r\n  onStudyReminder(callback) {\r\n    this.addEventListener('study-reminder', callback);\r\n  }\r\n\r\n  // Generic event listener\r\n  addEventListener(event, callback) {\r\n    if (this.socket) {\r\n      this.socket.on(event, callback);\r\n      \r\n      // Store listener for cleanup\r\n      if (!this.listeners.has(event)) {\r\n        this.listeners.set(event, []);\r\n      }\r\n      this.listeners.get(event).push(callback);\r\n    }\r\n  }\r\n\r\n  // Remove event listener\r\n  removeEventListener(event, callback) {\r\n    if (this.socket && this.listeners.has(event)) {\r\n      const eventListeners = this.listeners.get(event);\r\n      const index = eventListeners.indexOf(callback);\r\n      if (index > -1) {\r\n        eventListeners.splice(index, 1);\r\n        this.socket.off(event, callback);\r\n      }\r\n    }\r\n  }\r\n\r\n  // Remove all listeners for an event\r\n  removeAllListeners(event) {\r\n    if (this.socket) {\r\n      this.socket.removeAllListeners(event);\r\n      if (this.listeners.has(event)) {\r\n        this.listeners.delete(event);\r\n      }\r\n    }\r\n  }\r\n\r\n  // Clean up all listeners\r\n  cleanup() {\r\n    if (this.socket) {\r\n      this.listeners.forEach((callbacks, event) => {\r\n        callbacks.forEach(callback => {\r\n          this.socket.off(event, callback);\r\n        });\r\n      });\r\n      this.listeners.clear();\r\n    }\r\n  }\r\n\r\n  // Emit events\r\n  emit(event, data) {\r\n    if (this.socket && this.isConnected) {\r\n      this.socket.emit(event, data);\r\n    }\r\n  }\r\n\r\n  // Get connection status\r\n  getConnectionStatus() {\r\n    return {\r\n      isConnected: this.isConnected,\r\n      socketId: this.socket?.id || null\r\n    };\r\n  }\r\n}\r\n\r\nexport default new SocketService();\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}