{"ast":null,"code":"const API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:5000/api';\nclass ApiService {\n  constructor() {\n    this.baseURL = API_BASE_URL;\n  }\n\n  // Get auth token from localStorage\n  getAuthToken() {\n    return localStorage.getItem('token');\n  }\n\n  // Get headers with auth token\n  getHeaders() {\n    const token = this.getAuthToken();\n    return {\n      'Content-Type': 'application/json',\n      ...(token && {\n        Authorization: `Bearer ${token}`\n      })\n    };\n  }\n\n  // Generic request method\n  async request(endpoint, options = {}) {\n    const url = `${this.baseURL}${endpoint}`;\n    const config = {\n      headers: this.getHeaders(),\n      ...options\n    };\n    try {\n      const response = await fetch(url, config);\n      const data = await response.json();\n\n      // Debug logging removed for cleaner console\n\n      if (!response.ok) {\n        throw new Error(data.message || 'Something went wrong');\n      }\n      return data;\n    } catch (error) {\n      console.error('API request failed:', error);\n      throw error;\n    }\n  }\n\n  // Authentication methods\n  async register(userData) {\n    return this.request('/auth/register', {\n      method: 'POST',\n      body: JSON.stringify(userData)\n    });\n  }\n  async login(credentials) {\n    return this.request('/auth/login', {\n      method: 'POST',\n      body: JSON.stringify(credentials)\n    });\n  }\n  async getProfile() {\n    return this.request('/auth/me');\n  }\n  async updateProfile(userData) {\n    return this.request('/auth/profile', {\n      method: 'PUT',\n      body: JSON.stringify(userData)\n    });\n  }\n  async logout() {\n    return this.request('/auth/logout', {\n      method: 'POST'\n    });\n  }\n\n  // Health check\n  async healthCheck() {\n    return this.request('/health');\n  }\n\n  // Contact methods\n  async sendContactMessage(messageData) {\n    return this.request('/contact', {\n      method: 'POST',\n      body: JSON.stringify(messageData)\n    });\n  }\n\n  // Quiz methods\n  async getQuizzes(params = {}) {\n    const queryString = new URLSearchParams(params).toString();\n    return this.request(`/quizzes${queryString ? `?${queryString}` : ''}`);\n  }\n\n  // Public quiz stats (no authentication required)\n  async getPublicQuizStats() {\n    const response = await this.request('/quizzes?limit=100');\n    return response;\n  }\n  async getQuiz(id) {\n    return this.request(`/quizzes/${id}`);\n  }\n  async submitQuizAttempt(quizId, attemptData) {\n    return this.request(`/quizzes/${quizId}/attempt`, {\n      method: 'POST',\n      body: JSON.stringify(attemptData)\n    });\n  }\n  async getQuizRecommendations() {\n    return this.request('/quizzes/recommendations');\n  }\n\n  // User methods\n  async getUserProgress() {\n    return this.request('/users/progress');\n  }\n  async getUserAchievements() {\n    return this.request('/users/achievements');\n  }\n  async getAchievementProgress() {\n    return this.request('/users/achievements/progress');\n  }\n  async getRecentAchievements() {\n    return this.request('/users/achievements/recent');\n  }\n  async getUserStats() {\n    return this.request('/users/stats');\n  }\n  async updateUserPreferences(preferences) {\n    return this.request('/users/preferences', {\n      method: 'PUT',\n      body: JSON.stringify({\n        preferences\n      })\n    });\n  }\n  async levelUp() {\n    return this.request('/users/level-up', {\n      method: 'POST'\n    });\n  }\n\n  // Leaderboard methods\n  async getLeaderboard(params = {}) {\n    const queryString = new URLSearchParams(params).toString();\n    return this.request(`/leaderboard${queryString ? `?${queryString}` : ''}`);\n  }\n  async getWeeklyLeaderboard() {\n    return this.request('/leaderboard/weekly');\n  }\n  async getMonthlyLeaderboard() {\n    return this.request('/leaderboard/monthly');\n  }\n  async getUserRank() {\n    return this.request('/leaderboard/rank');\n  }\n\n  // AI methods\n  async getAIRecommendations(limit = 5) {\n    return this.request(`/ai/recommendations?limit=${limit}`);\n  }\n  async getLearningInsights() {\n    return this.request('/ai/insights');\n  }\n  async getLearningPath() {\n    return this.request('/ai/learning-path');\n  }\n  async getPerformanceAnalytics() {\n    return this.request('/ai/analytics');\n  }\n  async predictQuizPerformance(quizId) {\n    return this.request(`/ai/predict/${quizId}`);\n  }\n}\nexport default new ApiService();","map":{"version":3,"names":["API_BASE_URL","process","env","REACT_APP_API_URL","ApiService","constructor","baseURL","getAuthToken","localStorage","getItem","getHeaders","token","Authorization","request","endpoint","options","url","config","headers","response","fetch","data","json","ok","Error","message","error","console","register","userData","method","body","JSON","stringify","login","credentials","getProfile","updateProfile","logout","healthCheck","sendContactMessage","messageData","getQuizzes","params","queryString","URLSearchParams","toString","getPublicQuizStats","getQuiz","id","submitQuizAttempt","quizId","attemptData","getQuizRecommendations","getUserProgress","getUserAchievements","getAchievementProgress","getRecentAchievements","getUserStats","updateUserPreferences","preferences","levelUp","getLeaderboard","getWeeklyLeaderboard","getMonthlyLeaderboard","getUserRank","getAIRecommendations","limit","getLearningInsights","getLearningPath","getPerformanceAnalytics","predictQuizPerformance"],"sources":["C:/Users/RamRaghu/OneDrive/Desktop/build-week projects/project/gamification/FE/src/services/api.js"],"sourcesContent":["const API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:5000/api';\r\n\r\nclass ApiService {\r\n  constructor() {\r\n    this.baseURL = API_BASE_URL;\r\n  }\r\n\r\n  // Get auth token from localStorage\r\n  getAuthToken() {\r\n    return localStorage.getItem('token');\r\n  }\r\n\r\n  // Get headers with auth token\r\n  getHeaders() {\r\n    const token = this.getAuthToken();\r\n    return {\r\n      'Content-Type': 'application/json',\r\n      ...(token && { Authorization: `Bearer ${token}` })\r\n    };\r\n  }\r\n\r\n  // Generic request method\r\n  async request(endpoint, options = {}) {\r\n    const url = `${this.baseURL}${endpoint}`;\r\n    const config = {\r\n      headers: this.getHeaders(),\r\n      ...options\r\n    };\r\n\r\n    try {\r\n      const response = await fetch(url, config);\r\n      const data = await response.json();\r\n\r\n      // Debug logging removed for cleaner console\r\n\r\n      if (!response.ok) {\r\n        throw new Error(data.message || 'Something went wrong');\r\n      }\r\n\r\n      return data;\r\n    } catch (error) {\r\n      console.error('API request failed:', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  // Authentication methods\r\n  async register(userData) {\r\n    return this.request('/auth/register', {\r\n      method: 'POST',\r\n      body: JSON.stringify(userData)\r\n    });\r\n  }\r\n\r\n  async login(credentials) {\r\n    return this.request('/auth/login', {\r\n      method: 'POST',\r\n      body: JSON.stringify(credentials)\r\n    });\r\n  }\r\n\r\n  async getProfile() {\r\n    return this.request('/auth/me');\r\n  }\r\n\r\n  async updateProfile(userData) {\r\n    return this.request('/auth/profile', {\r\n      method: 'PUT',\r\n      body: JSON.stringify(userData)\r\n    });\r\n  }\r\n\r\n  async logout() {\r\n    return this.request('/auth/logout', {\r\n      method: 'POST'\r\n    });\r\n  }\r\n\r\n  // Health check\r\n  async healthCheck() {\r\n    return this.request('/health');\r\n  }\r\n\r\n  // Contact methods\r\n  async sendContactMessage(messageData) {\r\n    return this.request('/contact', {\r\n      method: 'POST',\r\n      body: JSON.stringify(messageData)\r\n    });\r\n  }\r\n\r\n  // Quiz methods\r\n  async getQuizzes(params = {}) {\r\n    const queryString = new URLSearchParams(params).toString();\r\n    return this.request(`/quizzes${queryString ? `?${queryString}` : ''}`);\r\n  }\r\n\r\n  // Public quiz stats (no authentication required)\r\n  async getPublicQuizStats() {\r\n    const response = await this.request('/quizzes?limit=100');\r\n    return response;\r\n  }\r\n\r\n  async getQuiz(id) {\r\n    return this.request(`/quizzes/${id}`);\r\n  }\r\n\r\n  async submitQuizAttempt(quizId, attemptData) {\r\n    return this.request(`/quizzes/${quizId}/attempt`, {\r\n      method: 'POST',\r\n      body: JSON.stringify(attemptData)\r\n    });\r\n  }\r\n\r\n  async getQuizRecommendations() {\r\n    return this.request('/quizzes/recommendations');\r\n  }\r\n\r\n  // User methods\r\n  async getUserProgress() {\r\n    return this.request('/users/progress');\r\n  }\r\n\r\n  async getUserAchievements() {\r\n    return this.request('/users/achievements');\r\n  }\r\n\r\n  async getAchievementProgress() {\r\n    return this.request('/users/achievements/progress');\r\n  }\r\n\r\n  async getRecentAchievements() {\r\n    return this.request('/users/achievements/recent');\r\n  }\r\n\r\n  async getUserStats() {\r\n    return this.request('/users/stats');\r\n  }\r\n\r\n  async updateUserPreferences(preferences) {\r\n    return this.request('/users/preferences', {\r\n      method: 'PUT',\r\n      body: JSON.stringify({ preferences })\r\n    });\r\n  }\r\n\r\n  async levelUp() {\r\n    return this.request('/users/level-up', {\r\n      method: 'POST'\r\n    });\r\n  }\r\n\r\n  // Leaderboard methods\r\n  async getLeaderboard(params = {}) {\r\n    const queryString = new URLSearchParams(params).toString();\r\n    return this.request(`/leaderboard${queryString ? `?${queryString}` : ''}`);\r\n  }\r\n\r\n  async getWeeklyLeaderboard() {\r\n    return this.request('/leaderboard/weekly');\r\n  }\r\n\r\n  async getMonthlyLeaderboard() {\r\n    return this.request('/leaderboard/monthly');\r\n  }\r\n\r\n  async getUserRank() {\r\n    return this.request('/leaderboard/rank');\r\n  }\r\n\r\n  // AI methods\r\n  async getAIRecommendations(limit = 5) {\r\n    return this.request(`/ai/recommendations?limit=${limit}`);\r\n  }\r\n\r\n  async getLearningInsights() {\r\n    return this.request('/ai/insights');\r\n  }\r\n\r\n  async getLearningPath() {\r\n    return this.request('/ai/learning-path');\r\n  }\r\n\r\n  async getPerformanceAnalytics() {\r\n    return this.request('/ai/analytics');\r\n  }\r\n\r\n  async predictQuizPerformance(quizId) {\r\n    return this.request(`/ai/predict/${quizId}`);\r\n  }\r\n}\r\n\r\nexport default new ApiService();\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}