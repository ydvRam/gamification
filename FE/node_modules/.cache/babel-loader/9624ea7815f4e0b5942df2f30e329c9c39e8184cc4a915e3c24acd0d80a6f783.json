{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\RamRaghu\\\\OneDrive\\\\Desktop\\\\build-week projects\\\\project\\\\gamification\\\\FE\\\\src\\\\context\\\\AuthContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useState, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AuthContext = /*#__PURE__*/createContext();\nexport const useAuth = () => {\n  _s();\n  const context = useContext(AuthContext);\n  if (!context) {\n    throw new Error('useAuth must be used within an AuthProvider');\n  }\n  return context;\n};\n_s(useAuth, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nexport const AuthProvider = ({\n  children\n}) => {\n  _s2();\n  const [user, setUser] = useState(null);\n  const [loading, setLoading] = useState(true);\n  const [isAuthenticated, setIsAuthenticated] = useState(false);\n  useEffect(() => {\n    // Check for existing authentication on app load\n    const checkAuth = async () => {\n      try {\n        const token = localStorage.getItem('authToken');\n        if (token) {\n          // Validate token with backend\n          const response = await fetch('/api/auth/me', {\n            headers: {\n              'Authorization': `Bearer ${token}`\n            }\n          });\n          if (response.ok) {\n            const userData = await response.json();\n            setUser(userData);\n            setIsAuthenticated(true);\n          } else {\n            localStorage.removeItem('authToken');\n          }\n        }\n      } catch (error) {\n        console.error('Auth check failed:', error);\n        localStorage.removeItem('authToken');\n      } finally {\n        setLoading(false);\n      }\n    };\n    checkAuth();\n  }, []);\n  const login = async (email, password) => {\n    try {\n      const response = await fetch('/api/auth/login', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          email,\n          password\n        })\n      });\n      if (response.ok) {\n        const data = await response.json();\n        localStorage.setItem('authToken', data.token);\n        setUser(data.user);\n        setIsAuthenticated(true);\n        return {\n          success: true\n        };\n      } else {\n        const error = await response.json();\n        return {\n          success: false,\n          error: error.message\n        };\n      }\n    } catch (error) {\n      return {\n        success: false,\n        error: 'Network error'\n      };\n    }\n  };\n  const signup = async userData => {\n    try {\n      const response = await fetch('/api/auth/register', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(userData)\n      });\n      if (response.ok) {\n        const data = await response.json();\n        localStorage.setItem('authToken', data.token);\n        setUser(data.user);\n        setIsAuthenticated(true);\n        return {\n          success: true\n        };\n      } else {\n        const error = await response.json();\n        return {\n          success: false,\n          error: error.message\n        };\n      }\n    } catch (error) {\n      return {\n        success: false,\n        error: 'Network error'\n      };\n    }\n  };\n  const logout = () => {\n    localStorage.removeItem('authToken');\n    setUser(null);\n    setIsAuthenticated(false);\n  };\n  const updateUser = updatedUser => {\n    setUser(updatedUser);\n  };\n  const value = {\n    user,\n    loading,\n    isAuthenticated,\n    login,\n    signup,\n    logout,\n    updateUser\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 121,\n    columnNumber: 5\n  }, this);\n};\n_s2(AuthProvider, \"xBgiRagNfQVCfEr2dT2PptfN+TE=\");\n_c = AuthProvider;\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","jsxDEV","_jsxDEV","AuthContext","useAuth","_s","context","Error","AuthProvider","children","_s2","user","setUser","loading","setLoading","isAuthenticated","setIsAuthenticated","checkAuth","token","localStorage","getItem","response","fetch","headers","ok","userData","json","removeItem","error","console","login","email","password","method","body","JSON","stringify","data","setItem","success","message","signup","logout","updateUser","updatedUser","value","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/RamRaghu/OneDrive/Desktop/build-week projects/project/gamification/FE/src/context/AuthContext.js"],"sourcesContent":["import React, { createContext, useContext, useState, useEffect } from 'react';\r\n\r\nconst AuthContext = createContext();\r\n\r\nexport const useAuth = () => {\r\n  const context = useContext(AuthContext);\r\n  if (!context) {\r\n    throw new Error('useAuth must be used within an AuthProvider');\r\n  }\r\n  return context;\r\n};\r\n\r\nexport const AuthProvider = ({ children }) => {\r\n  const [user, setUser] = useState(null);\r\n  const [loading, setLoading] = useState(true);\r\n  const [isAuthenticated, setIsAuthenticated] = useState(false);\r\n\r\n  useEffect(() => {\r\n    // Check for existing authentication on app load\r\n    const checkAuth = async () => {\r\n      try {\r\n        const token = localStorage.getItem('authToken');\r\n        if (token) {\r\n          // Validate token with backend\r\n          const response = await fetch('/api/auth/me', {\r\n            headers: {\r\n              'Authorization': `Bearer ${token}`\r\n            }\r\n          });\r\n          \r\n          if (response.ok) {\r\n            const userData = await response.json();\r\n            setUser(userData);\r\n            setIsAuthenticated(true);\r\n          } else {\r\n            localStorage.removeItem('authToken');\r\n          }\r\n        }\r\n      } catch (error) {\r\n        console.error('Auth check failed:', error);\r\n        localStorage.removeItem('authToken');\r\n      } finally {\r\n        setLoading(false);\r\n      }\r\n    };\r\n\r\n    checkAuth();\r\n  }, []);\r\n\r\n  const login = async (email, password) => {\r\n    try {\r\n      const response = await fetch('/api/auth/login', {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify({ email, password }),\r\n      });\r\n\r\n      if (response.ok) {\r\n        const data = await response.json();\r\n        localStorage.setItem('authToken', data.token);\r\n        setUser(data.user);\r\n        setIsAuthenticated(true);\r\n        return { success: true };\r\n      } else {\r\n        const error = await response.json();\r\n        return { success: false, error: error.message };\r\n      }\r\n    } catch (error) {\r\n      return { success: false, error: 'Network error' };\r\n    }\r\n  };\r\n\r\n  const signup = async (userData) => {\r\n    try {\r\n      const response = await fetch('/api/auth/register', {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify(userData),\r\n      });\r\n\r\n      if (response.ok) {\r\n        const data = await response.json();\r\n        localStorage.setItem('authToken', data.token);\r\n        setUser(data.user);\r\n        setIsAuthenticated(true);\r\n        return { success: true };\r\n      } else {\r\n        const error = await response.json();\r\n        return { success: false, error: error.message };\r\n      }\r\n    } catch (error) {\r\n      return { success: false, error: 'Network error' };\r\n    }\r\n  };\r\n\r\n  const logout = () => {\r\n    localStorage.removeItem('authToken');\r\n    setUser(null);\r\n    setIsAuthenticated(false);\r\n  };\r\n\r\n  const updateUser = (updatedUser) => {\r\n    setUser(updatedUser);\r\n  };\r\n\r\n  const value = {\r\n    user,\r\n    loading,\r\n    isAuthenticated,\r\n    login,\r\n    signup,\r\n    logout,\r\n    updateUser,\r\n  };\r\n\r\n  return (\r\n    <AuthContext.Provider value={value}>\r\n      {children}\r\n    </AuthContext.Provider>\r\n  );\r\n};\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}